<?php 
/*
 * PepipostAPIV10Lib
 *
 * This file was automatically generated by APIMATIC v2.0 on 04/08/2016
 */

namespace PepipostAPIV10Lib\Models;

use JsonSerializable;

class EmailDetails implements JsonSerializable {
    /**
     * TODO: Write general description for this property
     * @param string|null $fromname public property
     */
    protected $fromname;

    /**
     * TODO: Write general description for this property
     * @param string|null $subject public property
     */
    protected $subject;

    /**
     * TODO: Write general description for this property
     * @param string|null $from public property
     */
    protected $from;

    /**
     * TODO: Write general description for this property
     * @param string|null $replytoid public property
     */
    protected $replytoid;

    /**
     * TODO: Write general description for this property
     * @param string|null $tags public property
     */
    protected $tags;

    /**
     * TODO: Write general description for this property
     * @param string|null $content public property
     */
    protected $content;

    /**
     * Constructor to set initial or default values of member properties
	 * @param   string|null       $fromname    Initialization value for the property $this->fromname 
	 * @param   string|null       $subject     Initialization value for the property $this->subject  
	 * @param   string|null       $from        Initialization value for the property $this->from     
	 * @param   string|null       $replytoid   Initialization value for the property $this->replytoid
	 * @param   string|null       $tags        Initialization value for the property $this->tags     
	 * @param   string|null       $content     Initialization value for the property $this->content  
     */
    public function __construct()
    {
        if(6 == func_num_args())
        {
            $this->fromname  = func_get_arg(0);
            $this->subject   = func_get_arg(1);
            $this->from      = func_get_arg(2);
            $this->replytoid = func_get_arg(3);
            $this->tags      = func_get_arg(4);
            $this->content   = func_get_arg(5);
        }
    }

    /**
     * Return a property of the response if it exists.
     * Possibilities include: code, raw_body, headers, body (if the response is json-decodable)
     * @return mixed
     */
    public function __get($property)
    {
        if (property_exists($this, $property)) {
            //UTF-8 is recommended for correct JSON serialization
            $value = $this->$property;
            if (is_string($value) && mb_detect_encoding($value, "UTF-8", TRUE) != "UTF-8") {
                return utf8_encode($value);
            }
            else {
                return $value;
            }
        }
    }
    
    /**
     * Set the properties of this object
     * @param string $property the property name
     * @param mixed $value the property value
     */
    public function __set($property, $value)
    {
        if (property_exists($this, $property)) {
            //UTF-8 is recommended for correct JSON serialization
            if (is_string($value) && mb_detect_encoding($value, "UTF-8", TRUE) != "UTF-8") {
                $this->$property = utf8_encode($value);
            }
            else {
                $this->$property = $value;
            }
        }

        return $this;
    }

    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['fromname']  = $this->fromname;
        $json['subject']   = $this->subject;
        $json['from']      = $this->from;
        $json['replytoid'] = $this->replytoid;
        $json['tags']      = $this->tags;
        $json['content']   = $this->content;
        return $json;
    }
}